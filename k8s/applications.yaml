# Frontend (React) Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: hostel-management
  labels:
    app.kubernetes.io/name: hostel-management-system
    app.kubernetes.io/component: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: hostel-management-system
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hostel-management-system
        app.kubernetes.io/component: frontend
    spec:
      containers:
      - name: frontend
        image: ghcr.io/hostel-management-system-frontend:latest
        ports:
        - containerPort: 80
          name: http
        env:
        - name: REACT_APP_API_URL
          valueFrom:
            configMapKeyRef:
              name: hostel-config
              key: REACT_APP_API_URL
        - name: REACT_APP_SPRING_API_URL
          valueFrom:
            configMapKeyRef:
              name: hostel-config
              key: REACT_APP_SPRING_API_URL
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: hostel-management
  labels:
    app.kubernetes.io/name: hostel-management-system
    app.kubernetes.io/component: frontend
spec:
  selector:
    app.kubernetes.io/name: hostel-management-system
    app.kubernetes.io/component: frontend
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  type: ClusterIP

---
# Backend (Node.js) Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: hostel-management
  labels:
    app.kubernetes.io/name: hostel-management-system
    app.kubernetes.io/component: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: hostel-management-system
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hostel-management-system
        app.kubernetes.io/component: backend
    spec:
      containers:
      - name: backend
        image: ghcr.io/hostel-management-system-backend:latest
        ports:
        - containerPort: 5000
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: hostel-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: hostel-config
              key: PORT
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: hostel-secrets
              key: jwt-secret
        volumeMounts:
        - name: backend-data
          mountPath: /app/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: backend-data
        persistentVolumeClaim:
          claimName: backend-data-pvc

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: hostel-management
  labels:
    app.kubernetes.io/name: hostel-management-system
    app.kubernetes.io/component: backend
spec:
  selector:
    app.kubernetes.io/name: hostel-management-system
    app.kubernetes.io/component: backend
  ports:
  - port: 5000
    targetPort: 5000
    protocol: TCP
    name: http
  type: ClusterIP

---
# Spring Boot MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springboot-mongodb
  namespace: hostel-management
  labels:
    app.kubernetes.io/name: hostel-management-system
    app.kubernetes.io/component: springboot-mongodb
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: hostel-management-system
      app.kubernetes.io/component: springboot-mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hostel-management-system
        app.kubernetes.io/component: springboot-mongodb
    spec:
      containers:
      - name: springboot-mongodb
        image: ghcr.io/hostel-management-system-springboot-mongodb:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: SPRING_PROFILES_ACTIVE
          valueFrom:
            configMapKeyRef:
              name: hostel-config
              key: SPRING_PROFILES_ACTIVE
        - name: SPRING_DATA_MONGODB_URI
          value: "mongodb://$(MONGO_ROOT_USERNAME):$(MONGO_ROOT_PASSWORD)@mongodb-service:27017/$(MONGO_INITDB_DATABASE)?authSource=admin"
        - name: MONGO_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: hostel-secrets
              key: mongo-root-username
        - name: MONGO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hostel-secrets
              key: mongo-root-password
        - name: MONGO_INITDB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: hostel-config
              key: MONGO_INITDB_DATABASE
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: hostel-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

---
# Spring Boot MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: springboot-mongodb-service
  namespace: hostel-management
  labels:
    app.kubernetes.io/name: hostel-management-system
    app.kubernetes.io/component: springboot-mongodb
spec:
  selector:
    app.kubernetes.io/name: hostel-management-system
    app.kubernetes.io/component: springboot-mongodb
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  type: ClusterIP

---
# Spring Boot MySQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springboot-mysql
  namespace: hostel-management
  labels:
    app.kubernetes.io/name: hostel-management-system
    app.kubernetes.io/component: springboot-mysql
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: hostel-management-system
      app.kubernetes.io/component: springboot-mysql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hostel-management-system
        app.kubernetes.io/component: springboot-mysql
    spec:
      containers:
      - name: springboot-mysql
        image: ghcr.io/hostel-management-system-springboot-mysql:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: SPRING_PROFILES_ACTIVE
          valueFrom:
            configMapKeyRef:
              name: hostel-config
              key: SPRING_PROFILES_ACTIVE
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:mysql://mysql-service:3306/$(MYSQL_DATABASE)?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true"
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            configMapKeyRef:
              name: hostel-config
              key: MYSQL_USER
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hostel-secrets
              key: mysql-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: hostel-config
              key: MYSQL_DATABASE
        - name: SPRING_JPA_HIBERNATE_DDL_AUTO
          value: "update"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: hostel-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

---
# Spring Boot MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: springboot-mysql-service
  namespace: hostel-management
  labels:
    app.kubernetes.io/name: hostel-management-system
    app.kubernetes.io/component: springboot-mysql
spec:
  selector:
    app.kubernetes.io/name: hostel-management-system
    app.kubernetes.io/component: springboot-mysql
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  type: ClusterIP 