openapi: 3.0.1
info:
  title: Hostel Management System API (MySQL)
  description: RESTful API for managing hostel operations including student registration, room allocation, food menu management, and room change requests. This version uses MySQL as the database with JPA/Hibernate.
  contact:
    name: Hostel Management Team
    url: https://hostel.com
    email: admin@hostel.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
servers:
- url: http://localhost:8080
  description: Development Server (MySQL)
- url: https://api-mysql.hostel.com
  description: Production Server (MySQL)
security:
- Bearer Authentication: []
paths:
  /api/login:
    post:
      tags:
      - Authentication
      summary: User Login
      description: Authenticate user with username and password. Returns JWT token for authorized access.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                example: {"error": "Invalid username or password"}
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                example: {"error": "Database error"}
  /api/profile:
    get:
      tags:
      - Authentication
      summary: Get User Profile
      description: Retrieve the current user's profile information
      operationId: getProfile
      responses:
        200:
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                example: {"error": "Unauthorized"}
        404:
          description: User not found
          content:
            application/json:
              schema:
                example: {"error": "User not found"}
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                example: {"error": "Database error"}
      security:
      - Bearer Authentication: []
  /api/warden/create-student:
    post:
      tags:
      - Warden Management
      summary: Create New Student
      description: Create a new student account with personal details and room assignment
      operationId: createStudent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentRequest'
        required: true
      responses:
        201:
          description: Student created successfully
          content:
            application/json:
              schema:
                example: {"message": "Student created successfully", "studentId": "123"}
        400:
          description: Invalid request data
          content:
            application/json:
              schema:
                example: {"error": "Username already exists"}
        401:
          description: Unauthorized - Warden access required
          content:
            application/json:
              schema:
                example: {"error": "Unauthorized"}
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                example: {"error": "Database error"}
      security:
      - Bearer Authentication: []
  /api/student/room-change-request:
    post:
      tags:
      - Student Operations
      summary: Submit Room Change Request
      description: Submit a request to change current room assignment with reason
      operationId: submitRoomChangeRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomChangeRequestDto'
        required: true
      responses:
        201:
          description: Room change request submitted successfully
          content:
            application/json:
              schema:
                example: {"message": "Room change request submitted successfully"}
        400:
          description: Invalid request data
          content:
            application/json:
              schema:
                example: {"error": "Invalid room number"}
        401:
          description: Unauthorized - Student access required
          content:
            application/json:
              schema:
                example: {"error": "Unauthorized"}
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                example: {"error": "Database error"}
      security:
      - Bearer Authentication: []
  /api/rooms:
    get:
      tags:
      - Room Management
      summary: Get All Rooms
      description: Retrieve all rooms with their occupancy statistics and availability status
      operationId: getAllRooms
      responses:
        200:
          description: Rooms retrieved successfully
          content:
            application/json:
              schema:
                example: [{"roomNumber": "R001", "capacity": 4, "occupied": 2, "available": 2}]
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                example: {"error": "Database error"}
  /api/food-menu:
    get:
      tags:
      - Food Menu
      summary: Get Food Menu
      description: Retrieve the weekly food menu with meals organized by day and meal type
      operationId: getFoodMenu
      responses:
        200:
          description: Food menu retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodMenu'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                example: {"error": "Database error"}
components:
  schemas:
    LoginRequest:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
          description: User's username or email
          example: warden
        password:
          type: string
          description: User's password
          example: warden123
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT authentication token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        user:
          $ref: '#/components/schemas/UserDto'
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: User's unique identifier (auto-generated)
        username:
          type: string
          description: User's username
        fullName:
          type: string
          description: User's full name
        email:
          type: string
          description: User's email address
        phone:
          type: string
          description: User's phone number
        role:
          type: string
          description: User's role (warden/student)
          enum: [warden, student]
        roomNumber:
          type: string
          description: Current room assignment (for students)
        bedNumber:
          type: integer
          description: Current bed assignment (for students)
    CreateStudentRequest:
      required:
      - email
      - fullName
      - password
      - phone
      - username
      type: object
      properties:
        username:
          type: string
          description: Student's username
        password:
          type: string
          description: Student's password
        fullName:
          type: string
          description: Student's full name
        email:
          type: string
          description: Student's email address
        phone:
          type: string
          description: Student's phone number
        roomNumber:
          type: string
          description: Room assignment
        bedNumber:
          type: integer
          description: Bed assignment
    RoomChangeRequestDto:
      required:
      - newRoomNumber
      - reason
      type: object
      properties:
        newRoomNumber:
          type: string
          description: Desired new room number
        reason:
          type: string
          description: Reason for room change request
    FoodMenu:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Menu item unique identifier (auto-generated)
        day:
          type: string
          description: Day of the week
        mealType:
          type: string
          description: Type of meal (breakfast/lunch/dinner)
        items:
          type: array
          items:
            type: string
          description: List of food items for the meal
        nutritionalInfo:
          type: string
          description: Nutritional information
  securitySchemes:
    Bearer Authentication:
      type: http
      description: Enter JWT Bearer token in the format - Bearer {token}
      scheme: bearer
      bearerFormat: JWT 