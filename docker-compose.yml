version: '3.8'

services:
  # React Frontend
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: hostel-frontend
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
      - REACT_APP_SPRING_API_URL=http://localhost:8080/api
    depends_on:
      - backend
      - springboot-mongodb
      - springboot-mysql
    networks:
      - hostel-network
    restart: unless-stopped

  # Node.js Backend
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: hostel-backend
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET:-hostel_management_secret_key_2024}
    volumes:
      - backend-data:/app/data
    networks:
      - hostel-network
    restart: unless-stopped

  # Spring Boot with MongoDB
  springboot-mongodb:
    build:
      context: ./server-spring-boot
      dockerfile: Dockerfile
    container_name: hostel-springboot-mongodb
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/hostel_management
      - JWT_SECRET=${JWT_SECRET:-hostel_management_secret_key_2024}
      - SPRING_DATA_MONGODB_DATABASE=hostel_management
    depends_on:
      - mongodb
    networks:
      - hostel-network
    restart: unless-stopped

  # Spring Boot with MySQL
  springboot-mysql:
    build:
      context: ./server-spring-boot-mysql
      dockerfile: Dockerfile
    container_name: hostel-springboot-mysql
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/hostel_management?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=${MYSQL_USER:-hostel_user}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_PASSWORD:-hostel_password}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - JWT_SECRET=${JWT_SECRET:-hostel_management_secret_key_2024}
    depends_on:
      - mysql
    networks:
      - hostel-network
    restart: unless-stopped

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: hostel-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-admin123}
      - MONGO_INITDB_DATABASE=hostel_management
    volumes:
      - mongodb-data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - hostel-network
    restart: unless-stopped

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: hostel-mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-root123}
      - MYSQL_DATABASE=hostel_management
      - MYSQL_USER=${MYSQL_USER:-hostel_user}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-hostel_password}
    volumes:
      - mysql-data:/var/lib/mysql
      - ./scripts/mysql-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - hostel-network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password

  # Redis for Caching (Optional)
  redis:
    image: redis:7.2-alpine
    container_name: hostel-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - hostel-network
    restart: unless-stopped

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: hostel-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - frontend
      - backend
      - springboot-mongodb
      - springboot-mysql
    networks:
      - hostel-network
    restart: unless-stopped

volumes:
  mongodb-data:
    driver: local
  mysql-data:
    driver: local
  redis-data:
    driver: local
  backend-data:
    driver: local

networks:
  hostel-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 